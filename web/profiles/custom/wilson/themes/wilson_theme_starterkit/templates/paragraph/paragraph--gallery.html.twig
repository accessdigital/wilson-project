{#
/**
 * @file
 * Default theme implementation to display a gallery paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% extends "paragraph.html.twig" %}

{% set classes = [
  'carousel',
  'carousel--gallery',
] %}

{% block content %}
  <div{{ create_attribute({'class': classes}) }}>
    {# Only add gallery controls if there's > 1 image. #}
    {% if paragraph.field_media.getvalue|length > 1 %}
      <div class="glide">
        <div data-glide-el="track" class="glide__track">
          <div class="glide__slides flex items-center">
            {% for image in content.field_media|field_value %}
              <div class="glide__slide child-picture:w-auto text-center">
                {{ image }}
              </div>
            {% endfor %}
          </div>

          {{ attach_library('wilson_theme_starterkit/gallery') }}

          <div class="glide__controls flex justify-center mt-8 pb-2" data-glide-el="controls[nav]">
            {% for item in content.field_media|field_value %}
              <button class="h-4 w-4 mx-2 relative border-2 rounded-full transition-all hover:shadow-halo" data-glide-dir="={{ loop.index0 }}" type="button">
                <span class="visually-hidden">{{ 'Go to slide' }} {{ loop.index }}</span>
              </button>
            {% endfor %}
          </div>
        </div>
      </div>
    {% else %}
      <div class="flex items-center justify-center w-full">
        {{ content.field_media|field_value }}
      </div>
    {% endif %}
  </div>

{% endblock %}
